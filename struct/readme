1. Application/Service 主要负责参数检查、鉴权、业务逻辑调度、组装返回值等，最好不要涉及核心业务逻辑。还可以做一些异步任务的处理，因为有一些异步
   任务可能会需要调用其他的接口来获取信息，domain层可能不太方便调用到这些数据。
2. Domain/Service 主要负责核心业务逻辑的处理，可以按照对模块进行划分，形成不同的业务域。业务域应该独立，之间不能相互依赖。
  （如果有大量的这种场景，可能是业务域划分的不合理，可以考虑合并业务域；如果只是少量，可能是因为代码逻辑的实现需要使用到多个业务域的功能，可以考虑在上层进行功能的调度和组合）
3. Infra主要为上层提供数据/资源服务，包括但不限于数据读写、数据处理、rpc调用、数据格式转换、打点等等
    3.1 Infra/Repository 负责数据存储与读取相关的业务逻辑，内部含不同存储介质的包，包括但不限于MySQL、ABase、Redis、MQ等等。只有这一层可以
        与数据库打交道，不同介质的数据读写放在对应的包中，具体业务逻辑可以根据模块分文件存放。上层调用该层进行数据读写时，必须调用Repository中的
        接口方法（面向接口编程，依赖倒置），并由Repository中的方法调用不同的介质进行数据读写，上层不能直接调用到具体的介质包中，上层不能通过任何
        渠道感知到具体的存储介质，如方法名带有ToRedis/ToMySQL等。即便是只需要对某一个介质进行调用，也要单独封装称为Repository的一个实例方法。
        这样做主要是为了向上层屏蔽底层的细节，方便在需要的时候以较低的成本对底层工具进行替换。
    3.2 Infra/Service 负责与业务逻辑有关，但与数据读写无关的逻辑处理。
    3.3 负责与业务逻辑无关的工具性质的处理，这个包中不能有业务逻辑。如对格式,编码,日期的转换这种。
    3.4 Infra/rpc 负责RPC调用。该包只负责最基础最简单的RPC调用，不处理业务逻辑。根据对应的服务分文件存放，理论上同一个RPC的调用方法只需要一个，
        不应该因为业务逻辑的区别而提供多个对同一个RPC的调用方法（但是对某些高频调用的RPC方法可以有single和multi的区分）。
4. 调用关系
   4.1 上层可以调用下层，下层不可以调用上层（application是domain和infra的上层，domain是infra的上层）上述提到的不能被直接调用的包仍不可被上层直接调用。
   4.2 Infra内部调用关系
       4.2.1 Repository优先级最高，可以调用Infra包内的任何包，不能被Infra内的其它任何包调用
       4.2.2 Service优先级次之，可以调用Infra包内除了Repo的任何包，不能被除了Repo的其他任何包调用
       4.2.3 RPC优先级次之，可以调用Infra包内除了Repo和Service的任何包，不能被除了Repo和Service的其他任何包调用
       4.2.4 PKG的优先级最低，只能被上述3个包调用，需要使用到的数据可以由上游拿到之后传过来
5. Demo